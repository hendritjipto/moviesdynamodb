// Generated by https://quicktype.io

namespace HighLevelItemCRUDExample
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MovieJson
    {
        [JsonProperty("year")]
        public int Year { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("info")]
        public Info Info { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("directors", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Directors { get; set; }

        [JsonProperty("release_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public double? Rating { get; set; }

        [JsonProperty("genres", NullValueHandling = NullValueHandling.Ignore)]
        public Genre[] Genres { get; set; }

        [JsonProperty("image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("plot", NullValueHandling = NullValueHandling.Ignore)]
        public string Plot { get; set; }

        [JsonProperty("rank")]
        public int Rank { get; set; }

        [JsonProperty("running_time_secs", NullValueHandling = NullValueHandling.Ignore)]
        public int? RunningTimeSecs { get; set; }

        [JsonProperty("actors", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Actors { get; set; }
    }

    public enum Genre { Action, Adult, Adventure, Animation, Biography, Comedy, Crime, Documentary, Drama, Family, Fantasy, FilmNoir, History, Horror, Music, Musical, Mystery, News, Romance, SciFi, Sport, Thriller, War, Western };

    public partial class MovieJson
    {
        public static MovieJson[] FromJson(string json) => JsonConvert.DeserializeObject<MovieJson[]>(json, HighLevelItemCRUDExample.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MovieJson[] self) => JsonConvert.SerializeObject(self, HighLevelItemCRUDExample.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                GenreConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GenreConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Genre) || t == typeof(Genre?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Action":
                    return Genre.Action;
                case "Adult":
                    return Genre.Adult;
                case "Adventure":
                    return Genre.Adventure;
                case "Animation":
                    return Genre.Animation;
                case "Biography":
                    return Genre.Biography;
                case "Comedy":
                    return Genre.Comedy;
                case "Crime":
                    return Genre.Crime;
                case "Documentary":
                    return Genre.Documentary;
                case "Drama":
                    return Genre.Drama;
                case "Family":
                    return Genre.Family;
                case "Fantasy":
                    return Genre.Fantasy;
                case "Film-Noir":
                    return Genre.FilmNoir;
                case "History":
                    return Genre.History;
                case "Horror":
                    return Genre.Horror;
                case "Music":
                    return Genre.Music;
                case "Musical":
                    return Genre.Musical;
                case "Mystery":
                    return Genre.Mystery;
                case "News":
                    return Genre.News;
                case "Romance":
                    return Genre.Romance;
                case "Sci-Fi":
                    return Genre.SciFi;
                case "Sport":
                    return Genre.Sport;
                case "Thriller":
                    return Genre.Thriller;
                case "War":
                    return Genre.War;
                case "Western":
                    return Genre.Western;
            }
            throw new Exception("Cannot unmarshal type Genre");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Genre)untypedValue;
            switch (value)
            {
                case Genre.Action:
                    serializer.Serialize(writer, "Action");
                    return;
                case Genre.Adult:
                    serializer.Serialize(writer, "Adult");
                    return;
                case Genre.Adventure:
                    serializer.Serialize(writer, "Adventure");
                    return;
                case Genre.Animation:
                    serializer.Serialize(writer, "Animation");
                    return;
                case Genre.Biography:
                    serializer.Serialize(writer, "Biography");
                    return;
                case Genre.Comedy:
                    serializer.Serialize(writer, "Comedy");
                    return;
                case Genre.Crime:
                    serializer.Serialize(writer, "Crime");
                    return;
                case Genre.Documentary:
                    serializer.Serialize(writer, "Documentary");
                    return;
                case Genre.Drama:
                    serializer.Serialize(writer, "Drama");
                    return;
                case Genre.Family:
                    serializer.Serialize(writer, "Family");
                    return;
                case Genre.Fantasy:
                    serializer.Serialize(writer, "Fantasy");
                    return;
                case Genre.FilmNoir:
                    serializer.Serialize(writer, "Film-Noir");
                    return;
                case Genre.History:
                    serializer.Serialize(writer, "History");
                    return;
                case Genre.Horror:
                    serializer.Serialize(writer, "Horror");
                    return;
                case Genre.Music:
                    serializer.Serialize(writer, "Music");
                    return;
                case Genre.Musical:
                    serializer.Serialize(writer, "Musical");
                    return;
                case Genre.Mystery:
                    serializer.Serialize(writer, "Mystery");
                    return;
                case Genre.News:
                    serializer.Serialize(writer, "News");
                    return;
                case Genre.Romance:
                    serializer.Serialize(writer, "Romance");
                    return;
                case Genre.SciFi:
                    serializer.Serialize(writer, "Sci-Fi");
                    return;
                case Genre.Sport:
                    serializer.Serialize(writer, "Sport");
                    return;
                case Genre.Thriller:
                    serializer.Serialize(writer, "Thriller");
                    return;
                case Genre.War:
                    serializer.Serialize(writer, "War");
                    return;
                case Genre.Western:
                    serializer.Serialize(writer, "Western");
                    return;
            }
            throw new Exception("Cannot marshal type Genre");
        }

        public static readonly GenreConverter Singleton = new GenreConverter();
    }
}